name: Deploy to Timeweb Cloud

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Type check
        run: npm run type-check

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: "file:./test.db"
          JWT_SECRET: "test-secret"
          NODE_ENV: "test"

  deploy:
    runs-on: ubuntu-latest
    needs: test
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.TIMEWEB_HOST }}
          username: ${{ secrets.TIMEWEB_USER }}
          key: ${{ secrets.TIMEWEB_SSH_KEY }}
          port: ${{ secrets.TIMEWEB_PORT }}
          script: |
            set -e
            
            echo "Starting deployment to ${{ github.event.inputs.environment }}..."
            
            cd /home/${{ secrets.TIMEWEB_USER }}/team-hub
            
            # Create backup
            if [ -d ".backup" ]; then
              rm -rf .backup
            fi
            mkdir -p .backup
            cp -r . .backup/$(date +%Y%m%d_%H%M%S)/
            
            # Pull latest changes
            git fetch origin
            git reset --hard origin/main
            
            # Copy environment file
            if [ -f ".env.${{ github.event.inputs.environment }}" ]; then
              cp .env.${{ github.event.inputs.environment }} .env
            else
              echo "Warning: Environment file .env.${{ github.event.inputs.environment }} not found"
            fi
            
            # Build and restart containers
            echo "Building containers..."
            docker compose down --remove-orphans
            docker compose build --no-cache
            
            echo "Starting containers..."
            docker compose up -d
            
            # Wait for containers to be ready
            echo "Waiting for containers to be ready..."
            sleep 30
            
            # Run database migrations
            echo "Running database migrations..."
            docker compose exec -T web npm run db:push || {
              echo "Database migration failed, rolling back..."
              docker compose down
              exit 1
            }
            
            # Health check
            echo "Performing health check..."
            for i in {1..10}; do
              if curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
                echo "Health check passed!"
                break
              fi
              if [ $i -eq 10 ]; then
                echo "Health check failed after 10 attempts"
                docker compose logs web
                exit 1
              fi
              echo "Health check attempt $i failed, retrying in 10 seconds..."
              sleep 10
            done
            
            # Cleanup old images
            docker image prune -f
            
            echo "Deployment completed successfully!"
            echo "Environment: ${{ github.event.inputs.environment }}"
            echo "Commit: $(git rev-parse --short HEAD)"