version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: docker/Dockerfile.web
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - HASH_SALT_ROUNDS=${HASH_SALT_ROUNDS}
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - team-hub-network

  # Опционально: PostgreSQL для продакшена
  # postgres:
  #   image: postgres:15-alpine
  #   environment:
  #     - POSTGRES_DB=${POSTGRES_DB:-teamhub}
  #     - POSTGRES_USER=${POSTGRES_USER:-teamhub}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   restart: unless-stopped
  #   networks:
  #     - team-hub-network

  # Опционально: Redis для кеширования
  # redis:
  #   image: redis:7-alpine
  #   restart: unless-stopped
  #   networks:
  #     - team-hub-network

networks:
  team-hub-network:
    driver: bridge

# volumes:
#   postgres_data: