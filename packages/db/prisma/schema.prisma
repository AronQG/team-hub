generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  messages      Message[]
  tasks         Task[]
  assignedTasks Task[]    @relation("AssignedTasks")
  invites       Invite[]
  files         File[]
  
  @@index([email])
  @@index([createdAt])
}

model Invite {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  used      Boolean  @default(false)
  createdBy User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  
  @@index([token])
  @@index([email])
  @@index([expiresAt])
  @@index([used])
}

model Chat {
  id        String    @id @default(cuid())
  title     String
  isPrivate Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  messages  Message[]
  
  @@index([createdAt])
  @@index([updatedAt])
  @@index([isPrivate])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  createdAt DateTime @default(now())
  
  llmModel  String?  // 'gpt-4', 'claude-3', 'gemini-pro', etc.
  isAI      Boolean  @default(false)
  
  @@index([chatId])
  @@index([authorId])
  @@index([createdAt])
  @@index([isAI])
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("todo") // todo, in_progress, done
  order       Int
  
  creator     User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   String
  assignee    User?    @relation("AssignedTasks", fields: [assigneeId], references: [id], onDelete: SetNull)
  assigneeId  String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([status])
  @@index([creatorId])
  @@index([assigneeId])
  @@index([order])
  @@index([createdAt])
  @@index([updatedAt])
}

model File {
  id        String   @id @default(cuid())
  filename  String
  s3Key     String   @unique
  size      Int
  mimeType  String
  uploader  User     @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  uploaderId String
  createdAt DateTime @default(now())
  
  @@index([uploaderId])
  @@index([createdAt])
  @@index([mimeType])
  @@index([size])
}